import streamlit as st
from models import yandex_llm as gen
import asyncio
import re
from tts.main import TTS
from dotenv import load_dotenv
from tts import suno_songs as suno
from app_modules.const_for_website import genre, genre_en, title, range_for_us_picking

load_dotenv()


def cr_music_text(genre, song_first_sentence, temperature):
    with st.spinner('–¢–µ–∫—Å—Ç –ø–µ—Å–Ω–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è...'):  # –≤–∏–¥–∂–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∏

        task = f"""
                –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: {song_first_sentence}
                –ñ–∞–Ω—Ä: {genre}
                """
        try:
            song = asyncio.run(gen.generate_song(task, temperature))
            st.success(f'–£—Å–ø–µ—Ö! üòÅ')
            return song
        except BaseException:
            st.error('–ù–µ—É–¥–∞—á–∞ üòî')
            return


def generate_tts(text: str):
    """
    –≠—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π –º–æ–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å text-to-speech
    –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å checkbox'—ã –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    –ø–µ—Å–Ω–∏ —á–µ—Ä–µ–∑ tts –∏ suno
    """
    tts = TTS()
    path = tts.generate_audio_by_text(text)
    audio_file = open(path, 'rb')
    audio_bytes = audio_file.read()
    st.write('–û–∑–≤—É—á–µ–Ω–Ω–∞—è –ø–µ—Å–Ω—è:')
    st.audio(audio_bytes)


def generate_audio(song, us_genre):
    try:
        url = asyncio.run(suno.generate_audio(song, genre_en[genre.index(us_genre)]))
        st.write('–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–µ—Å–Ω—è —Å –º—É–∑—ã–∫–æ–π:')
        st.audio(url)
    except suno.AudioLoadException as e:
        st.error(e.args[0])


def main_proj():
    # —Ñ–æ–Ω
    # page_bg_img = '''
    # <style>
    # .appview-container {
    #     background: url("https://catherineasquithgallery.com/uploads/posts/2021-02/1614433093_57-p-anime-oboi-temnii-fon-108.jpg");
    #     background-size: cover;
    # }
    # </style>
    # '''
    # st.markdown(page_bg_img, unsafe_allow_html=True)

    # CSS –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∏ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞ –Ω–∞ –∑–∞–¥–Ω–∏–π —Ñ–æ–Ω
    song = ''
    st.markdown(
        """
        <style>
        .reportview-container {
            background: linear-gradient(to right, #33ccff, #ff99cc);
        }
        .stTextInput>div>div>input {
            color: #4f8bf9;
        }
        .stButton>button {
            border: 2px solid #4f8bf9;
            border-radius: 20px;
            color: #4f8bf9;
        }
        </style>
        """, unsafe_allow_html=True
    )

    # title
    st.title(title)

    us_genre = st.selectbox(
        "–°—Ç–∏–ª—å",
        genre,
        index=None,
        placeholder='–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç'
    )

    song_first_sentence = st.text_input('–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ')

    temperature = st.select_slider(
        '–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –æ—Ç 1 –¥–æ 10',
        options=range_for_us_picking)
    temperature = float(temperature / 10)

    use_suno = st.checkbox('–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Å–Ω—é (—Å –º—É–∑—ã–∫–æ–π –∏ –ø—Ä.)', value=True)
    use_tts = st.checkbox('–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–∑–≤—É—á–∫—É (tts)')

    button_clicked = st.button('–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å!')

    if button_clicked:
        if len(str(song_first_sentence)) > 5 and us_genre in genre:  # –ó–∞–ø–æ–ª–Ω–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ñ–æ—Ä–º—É

            song = cr_music_text(genre, song_first_sentence, temperature)  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–µ—Å–Ω–∏
            st.write(re.sub("\\n", "  \n", f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ {song_first_sentence}\n\n{song}\n\n—Å—É–ø–µ—Ä-–ø–µ—Å–Ω—è!"))

            if song:
                with st.spinner("–ê—É–¥–∏–æ—Ñ–∞–π–ª –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è (–≤ —Å—Ä–µ–¥–Ω–µ–º —ç—Ç–æ –¥–ª–∏—Ç—Å—è 1,5 –º–∏–Ω—É—Ç—ã)..."):
                    if use_suno:
                        generate_audio(song, us_genre)
                    if use_tts:
                        generate_tts(song)


        else:
            st.write('–ó–ê–ü–û–õ–ù–ò–¢–ï –ü–†–û–ü–£–°–ö–ò!')

        # write_to_file(song, 'song.txt')
